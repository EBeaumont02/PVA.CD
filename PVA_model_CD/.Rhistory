# Minimal theme with customizations to ensure axes and ticks are visible
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line.x = element_line(color = "black", linewidth = 0.8), # Black x-axis line
axis.line.y = element_line(color = "black", linewidth = 0.8), # Black y-axis line
axis.ticks.x = element_line(color = "black", linewidth = 0.8), # Ensure ticks on x-axis
axis.ticks.y = element_line(color = "black", linewidth = 0.8), # Ensure ticks on y-axis
axis.text.x = element_text(size = 14, color = "black"), # X-axis text size and color
axis.text.y = element_text(size = 14, color = "black"), # Y-axis text size and color
axis.title.x = element_text(size = 16, color = "black"), # X-axis title size and color
axis.title.y = element_text(size = 16, color = "black"), # Y-axis title size and color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# Create the ggplot
ggplot() +
# Plot observed fertility points
#geom_point(data = data_fert, aes(x = Age, y = Fertility), color = "black", shape = 16, size = 3) +
# Plot the fertility line, removing the last point and making it dashed
geom_line(data = data_fert, aes(x = Age, y = Fertility), size = 1.2, color = "black") +
# Customize axis labels
labs(x = "age (yrs)", y = "fertility") +
# Set axis limits to ensure both axes start at 0, add space at the top to prevent line cutoff
scale_x_continuous(expand = c(0.05, 0.05), limits = c(0, length(f.fert.vec) + 1), breaks = seq(0, length(f.fert.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, max(f.fert.vec) * 1.05), breaks = seq(0, max(f.fert.vec), by = 0.05)) +
# Minimal theme with customizations to ensure axes and ticks are visible
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line.x = element_line(color = "black", linewidth = 0.8), # Black x-axis line
axis.line.y = element_line(color = "black", linewidth = 0.8), # Black y-axis line
axis.ticks.x = element_line(color = "black", linewidth = 0.8), # Ensure ticks on x-axis
axis.ticks.y = element_line(color = "black", linewidth = 0.8), # Ensure ticks on y-axis
axis.text.x = element_text(size = 14, color = "black"), # X-axis text size and color
axis.text.y = element_text(size = 14, color = "black"), # Y-axis text size and color
axis.title.x = element_text(size = 16, color = "black"), # X-axis title size and color
axis.title.y = element_text(size = 16, color = "black"), # Y-axis title size and color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# Create the ggplot
ggplot() +
# Plot observed fertility points
#geom_point(data = data_fert, aes(x = Age, y = Fertility), color = "black", shape = 16, size = 3) +
# Plot the fertility line, removing the last point and making it dashed
geom_line(data = data_fert, aes(x = Age, y = Fertility), size = 1.2, color = "black") +
# Customize axis labels
labs(x = "age (yrs)", y = "fertility") +
# Set axis limits to ensure both axes start at 0, add space at the top to prevent line cutoff
scale_x_continuous(expand = c(0.03, 0.03), limits = c(0, length(f.fert.vec) + 1), breaks = seq(0, length(f.fert.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, max(f.fert.vec) * 1.05), breaks = seq(0, max(f.fert.vec), by = 0.05)) +
# Minimal theme with customizations to ensure axes and ticks are visible
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line.x = element_line(color = "black", linewidth = 0.8), # Black x-axis line
axis.line.y = element_line(color = "black", linewidth = 0.8), # Black y-axis line
axis.ticks.x = element_line(color = "black", linewidth = 0.8), # Ensure ticks on x-axis
axis.ticks.y = element_line(color = "black", linewidth = 0.8), # Ensure ticks on y-axis
axis.text.x = element_text(size = 14, color = "black"), # X-axis text size and color
axis.text.y = element_text(size = 14, color = "black"), # Y-axis text size and color
axis.title.x = element_text(size = 16, color = "black"), # X-axis title size and color
axis.title.y = element_text(size = 16, color = "black"), # Y-axis title size and color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# survival:
library(ggplot2)
# Create a data frame for the age and survival probability
data <- data.frame(Age = age.vec, Survival = surv.vec)
ggplot() +
# Plot the last observed data point
geom_point(data = data[nrow(data), ], aes(x = Age, y = Survival), color = "black", shape = 19, size = 3) +
# Plot the line, removing the last point and making it dashed
geom_line(data = data[-nrow(data), ], aes(x = Age, y = Survival), linetype = "dashed", size = 1.2, color = "black") +
# Customize axis labels
labs(x = "age (yrs)", y = "survival probability") +
# Set axis limits to ensure both axes start at 0, and ensure no data is cut off on the right side
scale_x_continuous(expand = c(0, 0), limits = c(0, max(age.vec) + 1), breaks = seq(0, max(age.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
# Remove gridlines and set a minimal theme
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line = element_line(color = "black"),   # Black axis lines
axis.ticks = element_line(color = "black"),  # Black tick marks
axis.text = element_text(size = 12, color = "black"),         # Adjust tick label size and ensure black color
axis.title = element_text(size = 14, color = "black"),        # Adjust axis title size and ensure black color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
ggplot() +
# Plot the last observed data point
geom_point(data = data[nrow(data), ], aes(x = Age, y = Survival), color = "black", shape = 19, size = 3) +
# Plot the line, removing the last point and making it dashed
geom_line(data = data[-nrow(data), ], aes(x = Age, y = Survival), linetype = "dashed", size = 1.2, color = "black") +
# Customize axis labels
labs(x = "age (yrs)", y = "survival probability") +
# Set axis limits to ensure both axes start at 0, and ensure no data is cut off on the right side
scale_x_continuous(expand = c(0.03, 0.03), limits = c(0, max(age.vec) + 1), breaks = seq(0, max(age.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
# Remove gridlines and set a minimal theme
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line = element_line(color = "black", linewidth = 0.8),   # Black axis lines
axis.ticks = element_line(color = "black", linewidth = 0.8),  # Black tick marks
axis.text = element_text(size = 14, color = "black"),         # Adjust tick label size and ensure black color
axis.title = element_text(size = 16, color = "black"),        # Adjust axis title size and ensure black color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# survival:
library(ggplot2)
# Create a data frame for the age and survival probability
data <- data.frame(Age = age.vec, Survival = surv.vec)
ggplot() +
# Plot the last observed data point
geom_point(data = data[nrow(data), ], aes(x = Age, y = Survival), color = "black", shape = 19, size = 5) +
# Plot the line, removing the last point and making it dashed
geom_line(data = data[-nrow(data), ], aes(x = Age, y = Survival), size = 1.5, color = "black") +
# Customize axis labels
labs(x = "age (yrs)", y = "survival probability") +
# Set axis limits to ensure both axes start at 0, and ensure no data is cut off on the right side
scale_x_continuous(expand = c(0.03, 0.03), limits = c(0, max(age.vec) + 1), breaks = seq(0, max(age.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
# Remove gridlines and set a minimal theme
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line = element_line(color = "black", linewidth = 0.8),   # Black axis lines
axis.ticks = element_line(color = "black", linewidth = 0.8),  # Black tick marks
axis.text = element_text(size = 14, color = "black"),         # Adjust tick label size and ensure black color
axis.title = element_text(size = 16, color = "black"),        # Adjust axis title size and ensure black color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# survival:
library(ggplot2)
# Create a data frame for the age and survival probability
data <- data.frame(Age = age.vec, Survival = surv.vec)
ggplot() +
# Plot the last observed data point
geom_point(data = data[nrow(data), ], aes(x = Age, y = Survival), color = "black", shape = 19, size = 3) +
# Plot the line, removing the last point and making it dashed
geom_line(data = data[-nrow(data), ], aes(x = Age, y = Survival), size = 1.5, color = "black") +
# Customize axis labels
labs(x = "age (yrs)", y = "survival probability") +
# Set axis limits to ensure both axes start at 0, and ensure no data is cut off on the right side
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, max(age.vec) + 1), breaks = seq(0, max(age.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
# Remove gridlines and set a minimal theme
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line = element_line(color = "black", linewidth = 0.8),   # Black axis lines
axis.ticks = element_line(color = "black", linewidth = 0.8),  # Black tick marks
axis.text = element_text(size = 14, color = "black"),         # Adjust tick label size and ensure black color
axis.title = element_text(size = 16, color = "black"),        # Adjust axis title size and ensure black color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# Create the ggplot
ggplot() +
# Plot observed fertility points
#geom_point(data = data_fert, aes(x = Age, y = Fertility), color = "black", shape = 16, size = 3) +
# Plot the fertility line, removing the last point and making it dashed
geom_line(data = data_fert, aes(x = Age, y = Fertility), size = 1.2, color = "#70AD47") +
# Customize axis labels
labs(x = "age (yrs)", y = "fertility") +
# Set axis limits to ensure both axes start at 0, add space at the top to prevent line cutoff
scale_x_continuous(expand = c(0.03, 0.03), limits = c(0, length(f.fert.vec) + 1), breaks = seq(0, length(f.fert.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, max(f.fert.vec) * 1.05), breaks = seq(0, max(f.fert.vec), by = 0.05)) +
# Minimal theme with customizations to ensure axes and ticks are visible
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line.x = element_line(color = "black", linewidth = 0.8), # Black x-axis line
axis.line.y = element_line(color = "black", linewidth = 0.8), # Black y-axis line
axis.ticks.x = element_line(color = "black", linewidth = 0.8), # Ensure ticks on x-axis
axis.ticks.y = element_line(color = "black", linewidth = 0.8), # Ensure ticks on y-axis
axis.text.x = element_text(size = 14, color = "black"), # X-axis text size and color
axis.text.y = element_text(size = 14, color = "black"), # Y-axis text size and color
axis.title.x = element_text(size = 16, color = "black"), # X-axis title size and color
axis.title.y = element_text(size = 16, color = "black"), # Y-axis title size and color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# Create the ggplot
ggplot() +
# Plot observed fertility points
#geom_point(data = data_fert, aes(x = Age, y = Fertility), color = "black", shape = 16, size = 3) +
# Plot the fertility line, removing the last point and making it dashed
geom_line(data = data_fert, aes(x = Age, y = Fertility), size = 1.3, color = "#70AD47") +
# Customize axis labels
labs(x = "age (yrs)", y = "fertility") +
# Set axis limits to ensure both axes start at 0, add space at the top to prevent line cutoff
scale_x_continuous(expand = c(0.03, 0.03), limits = c(0, length(f.fert.vec) + 1), breaks = seq(0, length(f.fert.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, max(f.fert.vec) * 1.05), breaks = seq(0, max(f.fert.vec), by = 0.05)) +
# Minimal theme with customizations to ensure axes and ticks are visible
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line.x = element_line(color = "black", linewidth = 0.8), # Black x-axis line
axis.line.y = element_line(color = "black", linewidth = 0.8), # Black y-axis line
axis.ticks.x = element_line(color = "black", linewidth = 0.8), # Ensure ticks on x-axis
axis.ticks.y = element_line(color = "black", linewidth = 0.8), # Ensure ticks on y-axis
axis.text.x = element_text(size = 14, color = "black"), # X-axis text size and color
axis.text.y = element_text(size = 14, color = "black"), # Y-axis text size and color
axis.title.x = element_text(size = 16, color = "black"), # X-axis title size and color
axis.title.y = element_text(size = 16, color = "black"), # Y-axis title size and color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# fertility:
# Create a data frame for the fertility data
data_fert <- data.frame(Age = seq_along(f.fert.vec), Fertility = f.fert.vec)
# Add Age = 0 and Fertility = 0
data_fert <- rbind(data.frame(Age = 0, Fertility = 0), data_fert)
# Create the ggplot
ggplot() +
# Plot observed fertility points
#geom_point(data = data_fert, aes(x = Age, y = Fertility), color = "black", shape = 16, size = 3) +
# Plot the fertility line, removing the last point and making it dashed
geom_line(data = data_fert, aes(x = Age, y = Fertility), size = 1.4, color = "#70AD47") +
# Customize axis labels
labs(x = "age (yrs)", y = "fertility") +
# Set axis limits to ensure both axes start at 0, add space at the top to prevent line cutoff
scale_x_continuous(expand = c(0.03, 0.03), limits = c(0, length(f.fert.vec) + 1), breaks = seq(0, length(f.fert.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, max(f.fert.vec) * 1.05), breaks = seq(0, max(f.fert.vec), by = 0.05)) +
# Minimal theme with customizations to ensure axes and ticks are visible
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line.x = element_line(color = "black", linewidth = 0.8), # Black x-axis line
axis.line.y = element_line(color = "black", linewidth = 0.8), # Black y-axis line
axis.ticks.x = element_line(color = "black", linewidth = 0.8), # Ensure ticks on x-axis
axis.ticks.y = element_line(color = "black", linewidth = 0.8), # Ensure ticks on y-axis
axis.text.x = element_text(size = 14, color = "black"), # X-axis text size and color
axis.text.y = element_text(size = 14, color = "black"), # Y-axis text size and color
axis.title.x = element_text(size = 16, color = "black"), # X-axis title size and color
axis.title.y = element_text(size = 16, color = "black"), # Y-axis title size and color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# survival:
library(ggplot2)
# Create a data frame for the age and survival probability
data <- data.frame(Age = age.vec, Survival = surv.vec)
ggplot() +
# Plot the last observed data point
geom_point(data = data[nrow(data), ], aes(x = Age, y = Survival), color = "black", shape = 19, size = 3) +
# Plot the line, removing the last point and making it dashed
geom_line(data = data[-nrow(data), ], aes(x = Age, y = Survival), size = 1.5, color = "black") +
# Customize axis labels
labs(x = "age (yrs)", y = "survival probability") +
# Set axis limits to ensure both axes start at 0, and ensure no data is cut off on the right side
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, max(age.vec) + 1), breaks = seq(0, max(age.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
# Remove gridlines and set a minimal theme
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line = element_line(color = "black", linewidth = 0.8),   # Black axis lines
axis.ticks = element_line(color = "black", linewidth = 0.8),  # Black tick marks
axis.text = element_text(size = 14, color = "black"),         # Adjust tick label size and ensure black color
axis.title = element_text(size = 16, color = "black"),        # Adjust axis title size and ensure black color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
ggplot() +
# Plot the last observed data point
geom_point(data = data[nrow(data), ], aes(x = Age, y = Survival), color = "#FFA500", shape = 19, size = 3) +
# Plot the line, removing the last point and making it dashed
geom_line(data = data[-nrow(data), ], aes(x = Age, y = Survival), size = 1.5, color = "#FFA500") +
# Customize axis labels
labs(x = "age (yrs)", y = "survival probability") +
# Set axis limits to ensure both axes start at 0, and ensure no data is cut off on the right side
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, max(age.vec) + 1), breaks = seq(0, max(age.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
# Remove gridlines and set a minimal theme
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line = element_line(color = "black", linewidth = 0.8),   # Black axis lines
axis.ticks = element_line(color = "black", linewidth = 0.8),  # Black tick marks
axis.text = element_text(size = 14, color = "black"),         # Adjust tick label size and ensure black color
axis.title = element_text(size = 16, color = "black"),        # Adjust axis title size and ensure black color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# survival:
library(ggplot2)
# Create a data frame for the age and survival probability
data <- data.frame(Age = age.vec, Survival = surv.vec)
ggplot() +
# Plot the last observed data point
geom_point(data = data[nrow(data), ], aes(x = Age, y = Survival), color = "#FF8E00", shape = 19, size = 3) +
# Plot the line, removing the last point and making it dashed
geom_line(data = data[-nrow(data), ], aes(x = Age, y = Survival), size = 1.5, color = "#FF8E00") +
# Customize axis labels
labs(x = "age (yrs)", y = "survival probability") +
# Set axis limits to ensure both axes start at 0, and ensure no data is cut off on the right side
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, max(age.vec) + 1), breaks = seq(0, max(age.vec) + 1, by = 2)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
# Remove gridlines and set a minimal theme
theme_minimal() +
theme(
panel.grid = element_blank(),                # Remove gridlines
axis.line = element_line(color = "black", linewidth = 0.8),   # Black axis lines
axis.ticks = element_line(color = "black", linewidth = 0.8),  # Black tick marks
axis.text = element_text(size = 14, color = "black"),         # Adjust tick label size and ensure black color
axis.title = element_text(size = 16, color = "black"),        # Adjust axis title size and ensure black color
plot.margin = unit(c(1, 0.5, 0.5, 0.5), "cm")  # Add some margin around the plot
)
# Initial setup
rm(list = ls())
library(bbmle)
#Define functions
#function - estBetaParams: function to estimate the parameters of a beta distribution based on mean and variance.
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2   # Calculate alpha using the rearranged mean and variance formulas.
beta <- alpha * (1 / mu - 1)   # Calculate beta using the estimated alpha and the mean.
return(params = list(alpha = alpha, beta = beta))   # Return the estimated parameters as a list.
}
#function - siler model: function to estimate cetacean survival based on age at death distirbution
Si.mod <- function(data, par = c(-0.15, 1.10, 0.15, 0.005, 0.15),
rm = 0, method = "Nelder-Mead",
control = list(fnscale = -1, maxit = 10000)){
data$age1 <- data[,1] + 1
optim(par,
function(par) {
a1 <- par[1]
b1 <- par[2]
a2 <- par[3]
a3 <- par[4]
b3 <- par[5]
if(rm != 0){
data <- data[-c(1,rm),]
data[,1] <- data[,1] - rm
data[,length(data)] <- data[,length(data)] - rm
}
n <- NROW(data)
S.t <- function(t) {
return(exp(-a1/b1 * (1 - exp(-b1 * t))) *
exp(-a2 * t) * exp(a3/b3 * (1 - exp(b3 * t))))
}
dif <- S.t(data[1:n,1]) - S.t(data[1:n,length(data)])
obs <- data[,2]
lnlk <- as.numeric(crossprod(obs, log(dif)))
return(lnlk)
},
method = method,
control = control)
}
# Load custom functions for matrix operations from an external script.
source("matrixOperators.r")
#defining parameters
maxlong <- 29 # Set the maximum longevity in the population model at each forecast time step. This value is used to define the upper age limit.
# Construct an age vector from 0 to the maximum longevity (maxlong)
age.vec <- seq(0, maxlong, 1)
# Store the length of the age vector for future use in matrix dimensions and loops.
lage <- length(age.vec)
# Define the number of life stages based on the length of the age vector.
stages <- lage
# Initializing the population matrix for modeling.
# Initially, all elements of the matrix are set to zero, indicating no individuals in any age class.
popmat <- matrix(0,nrow=stages,ncol=stages)
colnames(popmat) <- age.vec[1:stages]
rownames(popmat) <- age.vec[1:stages]
# Load maturity data from an external CSV file.
prop.mat <- read.table("prop.mat.csv",header=T,sep=",")  # TABLE CREATED USING DATA FROM PALMER # have to change age 8 changed with new data
# Extract the proportion of mature individuals from the dataset.
f.prop.mature <- prop.mat$prop.mat
# DEFINE AGE VECTOR (NO ADJUSTEMENT NEEDED)
f.age.maturity <- prop.mat$Age
# Plot the relationship between age and proportion mature.
plot(f.age.maturity,f.prop.mature,pch=19,xlab="age (yrs)", ylab="proportion mature")
# Create a data frame from the calculated ages of maturity and the corresponding proportions mature to repare the data for modeling
mat.dat <- data.frame(f.age.maturity,f.prop.mature)
# Initial parameter values for the logistic power function
# These are guesses to start the optimization process of fitting the model.
param.init <- c(1.003150891098860E+00, 1.435062082948057E+01, -3.991451548741554E+01)
# Fitting a logistic power function to maturity data
# The logistic power function form is: y = a / (1 + (x/b)^c), where 'y' is the proportion mature,
# 'x' is the age, and 'a', 'b', 'c' are parameters to be estimated.
# This model attempts to capture how the proportion of mature individuals varies with age.
fit.logp <- nls(f.prop.mature ~ a / (1+(f.age.maturity/b)^c),
data = mat.dat,
algorithm = "port",# Specifies the optimization algorithm to use.
start = c(a = param.init[1], b = param.init[2], c = param.init[3]),# Initial values for parameters.
trace = TRUE,# Allows the process to be visible for monitoring convergence.
nls.control(maxiter = 1000, tol = 1e-05, minFactor = 1/1024))# Control parameters for the fitting process.
# Summarize the fitting result to assess the quality of the model and parameter estimates.
fit.logp.summ <- summary(fit.logp)
# Plot the observed data to visualize the original relationship between age and proportion mature.
plot(f.age.maturity,f.prop.mature,pch=19,xlab="age (yrs)", ylab="proportion mature")
# Predict the proportion mature over a continuous range of ages based on the fitted model.
# this is 'bx' in Bradshaw et al 2018
age.vec.cont <- seq(1,max(age.vec),0.02) # A continuous age vector for prediction.
pred.p.mat <- coef(fit.logp)[1] / (1+(age.vec.cont/coef(fit.logp)[2])^coef(fit.logp)[3]) # Predicted values.
pred.p.matt <- ifelse(pred.p.mat > 1, 1, pred.p.mat)# Ensuring predicted proportions don't exceed 1.
# Add the model predictions to the plot to compare with the observed data.
lines(age.vec.cont,pred.p.matt,lty=2,lwd=3,col="red")
# Create a data frame of the continuous age vector and the corresponding predicted proportions mature.
# This can be used for further analysis or exported for documentation.
mat.fit.out <- data.frame(age.vec.cont, pred.p.matt)
# new b to match the data
b.new <- coef(fit.logp)[2]
# Re-plot the original data to visualize the relationship between age and proportion mature.
# This serves as a baseline comparison for the modified model predictions.
plot(f.age.maturity,f.prop.mature,pch=19, xlab="age (yrs)", ylab="proportion mature")
# Create a continuous vector of ages for prediction, similar to previous steps.
age.vec.cont <- seq(1,max(age.vec),0.02)
# Calculate predicted proportions mature using the new 'b' value while keeping 'a' and 'c' from the original fit.
# This modification allows us to specifically assess the impact of 'b' on the model's predictions.
pred.p.mat <- coef(fit.logp)[1] / (1+(age.vec.cont/b.new)^coef(fit.logp)[3])
pred.p.mat2 <- ifelse(pred.p.mat > 1, 1, pred.p.mat) # Ensure that predicted proportions do not exceed 1, as the proportion mature cannot be greater than 100%.
# Add the modified model predictions to the plot. The use of a different color or line type helps
# distinguish these predictions from the original data and model fit.
lines(age.vec.cont,pred.p.mat,lty=2,lwd=3,col="red")
lines(age.vec.cont,pred.p.mat2,lty=2,lwd=3,col="green")
# Create a data frame of the continuous age vector and the modified predicted proportions mature.
out.mat <- data.frame(age.vec.cont,pred.p.mat2)
# Extract a subset of the modified predictions for ages between 6 and 30
sub.mat <- which(out.mat$age.vec.cont > 6 & out.mat$age.vec.cont < 30)
out.mat[sub.mat,]
# Finally, create a comprehensive data frame of the age vector and the modified predicted proportions mature
# The first column contains a continuous sequence of ages, starting from 1 year to the maximum age present in the age vector (age.vec), incremented by 0.02 years. This fine granularity allows for a smooth curve when plotting the model's predictions.
# The second column contains the predicted proportions of mature individuals corresponding to each age in age.vec.cont. These predictions are calculated using the modified logistic power function with the new value of b. The predictions are adjusted to ensure they fall within the range of 0 to 1, representing realistic proportions (from 0% to 100% maturity).
mat.fit2.out <- data.frame(age.vec.cont, pred.p.mat2)
size.litter<-data.frame(seq(1:maxlong),1)
colnames(size.litter)<-c("age","litter_size")
size.litter$litter_size[1:6]<-0
fit.loglit <- nls(litter_size ~ al / (1+(age/bl)^cl),
data = size.litter,
algorithm = "port",# Specifies the optimization algorithm to use.
start = c(al = param.init[1], bl = param.init[2], cl= param.init[3]),# Initial values for parameters.
trace = TRUE,# Allows the process to be visible for monitoring convergence.
nls.control(maxiter = 1000, tol = 1e-05, minFactor = 1/1024))# Control parameters for the fitting process.
# Summarize the fitting result to assess the quality of the model and parameter estimates.
fit.loglit.summ <- summary(fit.loglit)
# Plot the observed data to visualize the original relationship between age and proportion mature.
plot(litter_size ~ age, data = size.litter, pch=19,xlab="age (yrs)", ylab="litter size")
# Predict the proportion mature over a continuous range of ages based on the fitted model.
# this is 'bx' in Bradshaw et al 2018
litt.age.vec.cont <- seq(1,30,0.02) # A continuous age vector for prediction.
litt.pred.p.mat <- coef(fit.loglit)[1] / (1+(litt.age.vec.cont/coef(fit.loglit)[2])^coef(fit.loglit)[3]) # Predicted values.
litt.pred.p.matt <- ifelse(litt.pred.p.mat > 1, 1, litt.pred.p.mat)# Ensuring predicted proportions don't exceed 1.
# Add the model predictions to the plot to compare with the observed data.
lines(litt.age.vec.cont ,litt.pred.p.matt,lty=2,lwd=3,col="red")
# Calculate predicted proportion mature using the coefficients from the logistic power model (fit.logp)
# adjusted for a new parameter value b.new. This model predicts the proportion of mature individuals
# based on age, adjusted to the new understanding of parameter 'b'
pred.p.mat3 <- coef(fit.logp)[1] / (1+(age.vec/b.new)^coef(fit.logp)[3])
# Ensure the predicted proportions do not exceed 1. If the model predicts values over 1,
# they are adjusted down to 1, reflecting the maximum possible proportion of mature individuals.
pred.p.mat4 <- ifelse(pred.p.mat3 > 1, 1, pred.p.mat3)
# Ensure that very small predicted values are adjusted to 0 to avoid unrealistic proportions of mature individuals.
# This step cleans up the data by setting a threshold below which the proportion mature is considered to be effectively zero.
pred.p.mat5 <- ifelse(pred.p.mat4 < 0.001, 0, pred.p.mat4)
### FS: Calculate predicted litter sizes based on age using the coefficients from FERTILITY MODEL FITTED L152
# This represents the expected number of offspring per mature female as a function of age.
litt.pred2 <- coef(fit.loglit)[1] / (1+(age.vec/coef(fit.loglit)[2])^coef(fit.loglit)[3])
# Combine the predicted proportion mature and the predicted litter size to calculate the average fertility vector.
#####Change this to account for calving period - breeding once every 3.15 years
f.fert.vec <- 0.31746 * (pred.p.mat5*litt.pred2) #  * 0.31746
plot(f.fert.vec,
pch = 16,             # Solid black points
col = "black",        # Black color for points
xlab = "Age",         # Label for x-axis
ylab = "Fertility",   # Label for y-axis
las = 1)              # Orientation of axis labels
# Adding the original Fert vec line to the plot
lines(f.fert.vec, col = "red", lwd = 2, lty = 2)  # Red dashed line
# Call data of proportion of each age group from stranding data
age.vec <- seq(0, 29, 1)
surv.data<- read.table("surv.data.csv",header=T,sep=",")
surv.vec <- surv.data$surv
data<-data.frame(age.vec,surv.vec)
# Load the ggplot2 library for visualization
library(ggplot2)
# Create the bar chart with blue bars and customized appearance
ggplot(data, aes(x = factor(age.vec), y = surv.vec)) +
geom_bar(stat = "identity", fill = "#035096") +
labs(x = "age", y = "number of individuals") +  # Add labels
theme_minimal() +  # Minimal theme
theme(
panel.grid = element_blank(),          # Remove grid lines
axis.line = element_line(color = "black"),  # Set both axes to black
axis.text = element_text(color = "black"),  # Set axis text color to black
axis.title = element_text(color = "black"),  # Set axis title text to black
axis.ticks = element_line(color = "black")   # Set tick marks to black
) +
scale_y_continuous(expand = c(0, 0),  # Remove space between x-axis and bars
breaks = seq(0, ceiling(max(surv.vec)), by = 1),  # Y-axis from 0 to max
limits = c(0, ceiling(max(surv.vec)))) +  # Y-axis limits start at 0
coord_cartesian(clip = "off", ylim = c(0, ceiling(max(surv.vec))))
#input data into siler model
Si.mod.out <- Si.mod(surv.data)
#define parameters
a1 <- Si.mod.out$par[1]
## plot in ggplot
output_df<- read.table("all_data(FS).csv",header=T,sep=",")
library(dplyr)
library(ggplot2)
Prob.ext.1 <- ggplot(data = output_df, mapping = aes(x=inipop, y=PrQExt)) +
geom_line(color = "black", linewidth = 1.05) +
#  geom_hline(yintercept = 0.1, linetype = 2, color = "red", linewidth = 1.05) +
#  geom_vline(xintercept = first_below_threshold_x, linetype = 2, color = "blue",  linewidth = 1.05) +
scale_x_continuous(limits = c(0, 30000), breaks = seq(0, 30000, by = 2500), expand = c(0, 0.7)) +
scale_y_continuous(limits = c(0, 1.05), breaks = seq(0, 1, by = 0.1), expand = c(0, 0)) +
theme_bw() +
theme(panel.grid = element_blank(),   # Remove grid lines
panel.border = element_blank(), # Remove all borders
axis.line.x = element_line(linewidth = 0.8),   # Add x-axis line
axis.line.y = element_line(linewidth = 0.8),   # Add y-axis line
axis.text = element_text(size = 14, color = "black"),  # Make axis ticks larger and black
axis.title.x = element_text(size = 16),  # Increase x-axis label text size
axis.title.y = element_text(size = 16),
plot.margin = unit(c(0.5, 1, 0.5, 0.5), "cm")) + # Increase y-axis label text size
labs(x = "minimum population size (N)", y = "probability of quasi-extinction")
print(Prob.ext.1)
